// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`svelte-preprocess-react > should convert text content to react children prop 1`] = `
"<script lang=\\"ts\\">import React$$sveltify from \\"svelte-preprocess-react/sveltify\\"; import React$$ReactDOM from \\"react-dom/client\\"; import { createPortal as React$$createPortal} from \\"react-dom\\"; import { renderToString as React$$renderToString } from \\"react-dom/server\\"; import Alert from \\"src/demo/react-components/Alert\\";
const count = 0;
const React$Alert = React$$sveltify(Alert, React$$createPortal, React$$ReactDOM, React$$renderToString);</script>

<React$Alert children=\\"Static Text\\" />

<React$Alert children=\\"{'\\\\n'}  {'\\"'}Multiline content{'\\"'}. Lorem ipsum dolor sit amet consectetur adipisicing elit.{'\\\\n'}  Suscipit nisi atque asperiores.{'\\\\n'}\\" />

<React$Alert children=\\"Value: {count + 1}\\" />
"
`;

exports[`svelte-preprocess-react > should import 'react-dom/server' when ssr is enabled 1`] = `
"<script>import React$$sveltify from \\"svelte-preprocess-react/sveltify\\"; import React$$ReactDOM from \\"react-dom/client\\"; import { createPortal as React$$createPortal} from \\"react-dom\\"; import { renderToString as React$$renderToString } from \\"react-dom/server\\"; 
  // @ts-nocheck
  import Clicker from \\"./Clicker\\";

  let count = 1;
const React$Clicker = React$$sveltify(Clicker, React$$createPortal, React$$ReactDOM, React$$renderToString);</script>

<React$Clicker
  {count}
  onCount={(next) => {
    count = next;
  }}
/>
"
`;

exports[`svelte-preprocess-react > should inject a script tag 1`] = `
"<script>
import React$$sveltify from \\"svelte-preprocess-react/sveltify\\"; import React$$ReactDOM from \\"react-dom/client\\"; import { createPortal as React$$createPortal} from \\"react-dom\\"; import { renderToString as React$$renderToString } from \\"react-dom/server\\"

const React$Counter = React$$sveltify(Counter, React$$createPortal, React$$ReactDOM, React$$renderToString);
</script>

<!-- Counter could be a global variable -->
<React$Counter />
"
`;

exports[`svelte-preprocess-react > should not import 'react-dom/server' when ssr is disabled 1`] = `
"<script>import React$$sveltify from \\"svelte-preprocess-react/sveltify\\"; import React$$ReactDOM from \\"react-dom/client\\"; import { createPortal as React$$createPortal} from \\"react-dom\\"; 
  // @ts-nocheck
  import Clicker from \\"./Clicker\\";

  let count = 1;
const React$Clicker = React$$sveltify(Clicker, React$$createPortal, React$$ReactDOM);</script>

<React$Clicker
  {count}
  onCount={(next) => {
    count = next;
  }}
/>
"
`;

exports[`svelte-preprocess-react > should portal slotted content as children 1`] = `
"<script>import React$$sveltify from \\"svelte-preprocess-react/sveltify\\"; import React$$ReactDOM from \\"react-dom/client\\"; import { createPortal as React$$createPortal} from \\"react-dom\\"; import { renderToString as React$$renderToString } from \\"react-dom/server\\"; 
  import Alert from \\"../../demo/react-components/Alert\\";

  if (!Alert) {
    // Bypass: 'Alert' is declared but its value is never read. (ts)
  }
const React$Alert = React$$sveltify(Alert, React$$createPortal, React$$ReactDOM, React$$renderToString);</script>

<React$Alert children=\\"A simple primary alertâ€”check it out!\\" />
"
`;

exports[`svelte-preprocess-react > should process <react:Context.Provider> tags 1`] = `
"<script lang=\\"ts\\">import React$$sveltify from \\"svelte-preprocess-react/sveltify\\"; import React$$ReactDOM from \\"react-dom/client\\"; import { createPortal as React$$createPortal} from \\"react-dom\\"; import { renderToString as React$$renderToString } from \\"react-dom/server\\"; import used from \\"$lib/used\\";
export let Context;
used(Context);
const React$Context$Provider = React$$sveltify(Context.Provider, React$$createPortal, React$$ReactDOM, React$$renderToString);</script>

<React$Context$Provider children=\\"content\\" />

<React$Context$Provider>
  <button>ok</button>
</React$Context$Provider>
"
`;

exports[`svelte-preprocess-react > should process <react:component> tags 1`] = `
"<script>import React$$sveltify from \\"svelte-preprocess-react/sveltify\\"; import React$$ReactDOM from \\"react-dom/client\\"; import { createPortal as React$$createPortal} from \\"react-dom\\"; import { renderToString as React$$renderToString } from \\"react-dom/server\\"; 
  // @ts-nocheck
  import Clicker from \\"./Clicker\\";

  let count = 1;
const React$Clicker = React$$sveltify(Clicker, React$$createPortal, React$$ReactDOM, React$$renderToString);</script>

<React$Clicker
  {count}
  onCount={(next) => {
    count = next;
  }}
/>
"
`;

exports[`svelte-preprocess-react > should process <react:component> tags 2`] = `
"<script>import React$$sveltify from \\"svelte-preprocess-react/sveltify\\"; import React$$ReactDOM from \\"react-dom/client\\"; import { createPortal as React$$createPortal} from \\"react-dom\\"; import { renderToString as React$$renderToString } from \\"react-dom/server\\"; 
  // @ts-nocheck
  import Clicker from \\"./Clicker\\";

  let count = 1;
const React$Clicker = React$$sveltify(Clicker, React$$createPortal, React$$ReactDOM, React$$renderToString);</script>

<h2>prop and event</h2>
<React$Clicker
  {count}
  onCount={(next) => {
    count = next;
  }}
/>
<h2>prop and Prop event</h2>
<React$Clicker
  count={10}
  onCount={() => {
    console.info(\\"count\\");
  }}
/>
<h2>prop</h2>
<React$Clicker {count} />
<h2>.</h2>
<React$Clicker />
"
`;

exports[`svelte-preprocess-react > should process <react:element> (lowercase) tags 1`] = `
"<script>
import React$$sveltify from \\"svelte-preprocess-react/sveltify\\"; import React$$ReactDOM from \\"react-dom/client\\"; import { createPortal as React$$createPortal} from \\"react-dom\\"; import { renderToString as React$$renderToString } from \\"react-dom/server\\"

const React$button = React$$sveltify(\\"button\\", React$$createPortal, React$$ReactDOM, React$$renderToString);
</script>

<React$button onClick={() => console.info(\\"clicked\\")} on:keydown>
  <slot />
</React$button>
"
`;

exports[`svelte-preprocess-react > should process {:else} {:then} and {:catch} sections 1`] = `
"<script lang=\\"ts\\">import React$$sveltify from \\"svelte-preprocess-react/sveltify\\"; import React$$ReactDOM from \\"react-dom/client\\"; import { createPortal as React$$createPortal} from \\"react-dom\\"; import { renderToString as React$$renderToString } from \\"react-dom/server\\"; const number = 1;
const Component = () => null;
export {};
const React$Component = React$$sveltify(Component, React$$createPortal, React$$ReactDOM, React$$renderToString);</script>

{#if number === 1}
  <React$Component />
{:else if number === 2}
  <React$Component />
{:else}
  <React$Component />
{/if}

{#each [] as item}
  <React$Component />
{:else}
  <React$Component />
{/each}

{#await Promise.resolve()}
  <React$Component />
{:then}
  <React$Component />
{:catch}
  <React$Component />
{/await}
"
`;

exports[`svelte-preprocess-react > should support typescript when using preprocess 1`] = `
"<script lang=\\"ts\\">export let title;
</script>

<h1>{title}</h1>
"
`;
