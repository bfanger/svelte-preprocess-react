// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`svelte-preprocess-react > should convert text content to react children prop 1`] = `
"<script lang="ts">import { sveltify as React$$sveltify } from "svelte-preprocess-react"; import React$$ReactDOM from "react-dom/client"; import { createPortal as React$$createPortal} from "react-dom"; import { renderToString as React$$renderToString } from "react-dom/server";
  import Alert from "../../demo/react-components/Alert";

  const count = 0;
;const React$Alert = React$$sveltify(Alert, React$$createPortal, React$$ReactDOM, React$$renderToString);</script>

<React$Alert react$Children="Static Text" />

<React$Alert react$Children="{'\\n'}  {'"'}Multiline content{'"'}. Lorem ipsum dolor sit amet consectetur adipisicing elit.{'\\n'}  Suscipit nisi atque asperiores.{'\\n'}" />

<React$Alert react$Children="Value: {count + 1}" />
"
`;

exports[`svelte-preprocess-react > should import 'react-dom/server' when ssr is enabled 1`] = `
"<script>import { sveltify as React$$sveltify } from "svelte-preprocess-react"; import React$$ReactDOM from "react-dom/client"; import { createPortal as React$$createPortal} from "react-dom"; import { renderToString as React$$renderToString } from "react-dom/server";
  // @ts-nocheck
  import Clicker from "./Clicker";

  let count = 1;
;const React$Clicker = React$$sveltify(Clicker, React$$createPortal, React$$ReactDOM, React$$renderToString);</script>

<React$Clicker
  {count}
  onCount={(next) => {
    count = next;
  }}
/>
"
`;

exports[`svelte-preprocess-react > should inject a script tag 1`] = `
"<script>
import { sveltify as React$$sveltify } from "svelte-preprocess-react"; import React$$ReactDOM from "react-dom/client"; import { createPortal as React$$createPortal} from "react-dom"; import { renderToString as React$$renderToString } from "react-dom/server";

const React$Counter = React$$sveltify(Counter, React$$createPortal, React$$ReactDOM, React$$renderToString);
</script>

<!-- Counter could be a global variable -->
<React$Counter />
"
`;

exports[`svelte-preprocess-react > should not import 'react-dom/server' when ssr is disabled 1`] = `
"<script>import { sveltify as React$$sveltify } from "svelte-preprocess-react"; import React$$ReactDOM from "react-dom/client"; import { createPortal as React$$createPortal} from "react-dom";
  // @ts-nocheck
  import Clicker from "./Clicker";

  let count = 1;
;const React$Clicker = React$$sveltify(Clicker, React$$createPortal, React$$ReactDOM);</script>

<React$Clicker
  {count}
  onCount={(next) => {
    count = next;
  }}
/>
"
`;

exports[`svelte-preprocess-react > should portal slotted content as children 1`] = `
"<script>import { sveltify as React$$sveltify } from "svelte-preprocess-react"; import React$$ReactDOM from "react-dom/client"; import { createPortal as React$$createPortal} from "react-dom"; import { renderToString as React$$renderToString } from "react-dom/server";
  import Alert from "../../demo/react-components/Alert";
;const React$Alert = React$$sveltify(Alert, React$$createPortal, React$$ReactDOM, React$$renderToString);</script>

<React$Alert react$Children="A simple primary alertâ€”check it out!" />
"
`;

exports[`svelte-preprocess-react > should process <react:Context.Provider> tags 1`] = `
"<script lang="ts">import { sveltify as React$$sveltify } from "svelte-preprocess-react"; import React$$ReactDOM from "react-dom/client"; import { createPortal as React$$createPortal} from "react-dom"; import { renderToString as React$$renderToString } from "react-dom/server";
  import type { Context as ContentType } from "react";
  import { used } from "svelte-preprocess-react";

  export let Context: ContentType<any>;
  $: Provider = Context.Provider;

  used(Provider);
;const React$Provider = React$$sveltify(Provider, React$$createPortal, React$$ReactDOM, React$$renderToString);</script>

<React$Provider react$Children="content" />

<React$Provider>
  <button>ok</button>
</React$Provider>
"
`;

exports[`svelte-preprocess-react > should process <react:component> tags 1`] = `
"<script>import { sveltify as React$$sveltify } from "svelte-preprocess-react"; import React$$ReactDOM from "react-dom/client"; import { createPortal as React$$createPortal} from "react-dom"; import { renderToString as React$$renderToString } from "react-dom/server";
  // @ts-nocheck
  import Clicker from "./Clicker";

  let count = 1;
;const React$Clicker = React$$sveltify(Clicker, React$$createPortal, React$$ReactDOM, React$$renderToString);</script>

<React$Clicker
  {count}
  onCount={(next) => {
    count = next;
  }}
/>
"
`;

exports[`svelte-preprocess-react > should process <react:component> tags 2`] = `
"<script>import { sveltify as React$$sveltify } from "svelte-preprocess-react"; import React$$ReactDOM from "react-dom/client"; import { createPortal as React$$createPortal} from "react-dom"; import { renderToString as React$$renderToString } from "react-dom/server";
  // @ts-nocheck
  import Clicker from "./Clicker";

  let count = 1;
;const React$Clicker = React$$sveltify(Clicker, React$$createPortal, React$$ReactDOM, React$$renderToString);</script>

<h2>prop and event</h2>
<React$Clicker
  {count}
  onCount={(next) => {
    count = next;
  }}
/>
<h2>prop and Prop event</h2>
<React$Clicker
  count={10}
  onCount={() => {
    console.info("count");
  }}
/>
<h2>prop</h2>
<React$Clicker {count} />
<h2>.</h2>
<React$Clicker />
"
`;

exports[`svelte-preprocess-react > should process <react:element> (lowercase) tags 1`] = `
"<script>
import { sveltify as React$$sveltify } from "svelte-preprocess-react"; import React$$ReactDOM from "react-dom/client"; import { createPortal as React$$createPortal} from "react-dom"; import { renderToString as React$$renderToString } from "react-dom/server";

const React$button = React$$sveltify("button", React$$createPortal, React$$ReactDOM, React$$renderToString);
</script>

<React$button onclick={() => console.info("clicked")}>
  <slot />
</React$button>
"
`;

exports[`svelte-preprocess-react > should process {:else} {:then} and {:catch} sections 1`] = `
"<script lang="ts">import { sveltify as React$$sveltify } from "svelte-preprocess-react"; import React$$ReactDOM from "react-dom/client"; import { createPortal as React$$createPortal} from "react-dom"; import { renderToString as React$$renderToString } from "react-dom/server";
  import type React from "react";

  const number = 1;

  const Component: React.FC = () => null;
;const React$Component = React$$sveltify(Component, React$$createPortal, React$$ReactDOM, React$$renderToString);</script>

<!-- eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -->
{#if number === 1}
  <React$Component />
  <!-- eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -->
{:else if number === 2}
  <React$Component />
{:else}
  <React$Component />
{/if}

{#each [] as item}
  <React$Component />
{:else}
  <React$Component />
{/each}

{#await Promise.resolve()}
  <React$Component />
{:then}
  <React$Component />
{:catch}
  <React$Component />
{/await}
"
`;

exports[`svelte-preprocess-react > should process on:event forwarding 1`] = `
"<script lang="ts">import { sveltify as React$$sveltify } from "svelte-preprocess-react"; import React$$ReactDOM from "react-dom/client"; import { createPortal as React$$createPortal} from "react-dom"; import { renderToString as React$$renderToString } from "react-dom/server";
  import { used } from "svelte-preprocess-react";
  import Clicker from "./Clicker";

  used(Clicker);

  let { value = 0, onCount } = $props<{
    value: number;
    onCount: (count: number) => void;
  }>();
;const React$Clicker = React$$sveltify(Clicker, React$$createPortal, React$$ReactDOM, React$$renderToString);</script>

<React$Clicker count={value} {onCount} />
"
`;

exports[`svelte-preprocess-react > should support typescript when using preprocess 1`] = `
"<script lang="ts">
  export let title: string;
</script>

<h1>{title}</h1>
"
`;
