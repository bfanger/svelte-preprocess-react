// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`svelte-preprocess-react > should convert text content to react children prop 1`] = `
"<script lang="ts">import inject$$ReactDOM from "react-dom/client"; import { createPortal as inject$$createPortal} from "react-dom"; import { renderToString as inject$$renderToString } from "react-dom/server"; import { sveltify } from "svelte-preprocess-react";
  import Alert from "../../demo/react-components/Alert";

  const react = sveltify({ Alert }, { createPortal: inject$$createPortal, ReactDOM: inject$$ReactDOM, renderToString: inject$$renderToString });

  const count = 0;
;</script>

<react.Alert react$children="Static Text" />

<react.Alert react$children="{'\\n'}  {'"'}Multiline content{'"'}. Lorem ipsum dolor sit amet consectetur adipisicing elit.{'\\n'}  Suscipit nisi atque asperiores.{'\\n'}" />

<react.Alert react$children="Value: {count + 1}" />
"
`;

exports[`svelte-preprocess-react > should import 'react-dom/server' when ssr is enabled 1`] = `
"<script lang="ts">import inject$$ReactDOM from "react-dom/client"; import { createPortal as inject$$createPortal} from "react-dom"; import { renderToString as inject$$renderToString } from "react-dom/server"; import { sveltify } from "svelte-preprocess-react";
  import Clicker from "./Clicker";

  const react = sveltify({ Clicker }, { createPortal: inject$$createPortal, ReactDOM: inject$$ReactDOM, renderToString: inject$$renderToString });

  let count = 1;
;</script>

<react.Clicker
  {count}
  onCount={(next) => {
    count = next;
  }}
></react.Clicker>
"
`;

exports[`svelte-preprocess-react > should inject a script tag 1`] = `
"<script>
import inject$$ReactDOM from "react-dom/client"; import { createPortal as inject$$createPortal} from "react-dom"; import { renderToString as inject$$renderToString } from "react-dom/server"; import { sveltify } from "svelte-preprocess-react";

const react = sveltify({ Counter }, { createPortal: inject$$createPortal, ReactDOM: inject$$ReactDOM, renderToString: inject$$renderToString });
</script>

<!-- Counter could be a global variable -->
<react.Counter></react.Counter>
"
`;

exports[`svelte-preprocess-react > should not import 'react-dom/server' when ssr is disabled 1`] = `
"<script lang="ts">import inject$$ReactDOM from "react-dom/client"; import { createPortal as inject$$createPortal} from "react-dom"; import { sveltify } from "svelte-preprocess-react";
  import Clicker from "./Clicker";

  const react = sveltify({ Clicker }, { createPortal: inject$$createPortal, ReactDOM: inject$$ReactDOM });

  let count = 1;
;</script>

<react.Clicker
  {count}
  onCount={(next) => {
    count = next;
  }}
></react.Clicker>
"
`;

exports[`svelte-preprocess-react > should portal slotted content as children 1`] = `
"<script lang="ts">import inject$$ReactDOM from "react-dom/client"; import { createPortal as inject$$createPortal} from "react-dom"; import { renderToString as inject$$renderToString } from "react-dom/server"; import { sveltify } from "svelte-preprocess-react";
  import Alert from "../../demo/react-components/Alert";

  const react = sveltify({ Alert }, { createPortal: inject$$createPortal, ReactDOM: inject$$ReactDOM, renderToString: inject$$renderToString });
;</script>

<react.Alert react$children="A simple primary alert. Check it out!" />
"
`;

exports[`svelte-preprocess-react > should process <react.Component.Item> tags 1`] = `
"<script lang="ts">import inject$$ReactDOM from "react-dom/client"; import { createPortal as inject$$createPortal} from "react-dom"; import { renderToString as inject$$renderToString } from "react-dom/server"; import { sveltify } from "svelte-preprocess-react";
  import List from "./List";

  const react = sveltify({ List , inject$$List$Item: List.Item , inject$$List$Item$Icon: List.Item.Icon }, { createPortal: inject$$createPortal, ReactDOM: inject$$ReactDOM, renderToString: inject$$renderToString });
;</script>

<react.List>
  <react.inject$$List$Item label="1" />
  <react.inject$$List$Item react$children="Item 2" />
  <react.inject$$List$Item>Item <span>3</span></react.inject$$List$Item>
  <react.inject$$List$Item
    ><react.inject$$List$Item$Icon icon="chevron-right" /></react.inject$$List$Item
  >
</react.List>
"
`;

exports[`svelte-preprocess-react > should process <react:Context.Provider> tags 1`] = `
"<script lang="ts">import inject$$ReactDOM from "react-dom/client"; import { createPortal as inject$$createPortal} from "react-dom"; import { renderToString as inject$$renderToString } from "react-dom/server"; import { sveltify } from "svelte-preprocess-react";
  import { createContext, type Context } from "react";

  type Props = {
    context: Context<any>;
  };
  let { context = createContext(false) }: Props = $props();

  let react = $derived(sveltify({ Provider: context.Provider }, { createPortal: inject$$createPortal, ReactDOM: inject$$ReactDOM, renderToString: inject$$renderToString }));
;</script>

<react.Provider value={true} react$children="content" />
"
`;

exports[`svelte-preprocess-react > should process <react:component> tags 1`] = `
"<script lang="ts">import inject$$ReactDOM from "react-dom/client"; import { createPortal as inject$$createPortal} from "react-dom"; import { renderToString as inject$$renderToString } from "react-dom/server"; import { sveltify } from "svelte-preprocess-react";
  import Clicker from "./Clicker";

  const react = sveltify({ Clicker }, { createPortal: inject$$createPortal, ReactDOM: inject$$ReactDOM, renderToString: inject$$renderToString });

  let count = 1;
;</script>

<react.Clicker
  {count}
  onCount={(next) => {
    count = next;
  }}
></react.Clicker>
"
`;

exports[`svelte-preprocess-react > should process <react:component> tags 2`] = `
"<script lang="ts">import inject$$ReactDOM from "react-dom/client"; import { createPortal as inject$$createPortal} from "react-dom"; import { renderToString as inject$$renderToString } from "react-dom/server"; import { sveltify } from "svelte-preprocess-react";
  //@ts-nocheck
  import Clicker from "./Clicker";

  const react = sveltify({ Clicker }, { createPortal: inject$$createPortal, ReactDOM: inject$$ReactDOM, renderToString: inject$$renderToString });

  let count = 1;
;</script>

<h2>prop and event</h2>
<react.Clicker
  {count}
  onCount={(next) => {
    count = next;
  }}
></react.Clicker>
<h2>prop and Prop event</h2>
<react.Clicker
  count={10}
  onCount={() => {
    console.info("count");
  }}
></react.Clicker>
<h2>prop</h2>
<react.Clicker {count}></react.Clicker>
<h2>.</h2>
<react.Clicker></react.Clicker>
"
`;

exports[`svelte-preprocess-react > should process <react:element> (lowercase) tags 1`] = `
"<script>
import inject$$ReactDOM from "react-dom/client"; import { createPortal as inject$$createPortal} from "react-dom"; import { renderToString as inject$$renderToString } from "react-dom/server"; import { sveltify } from "svelte-preprocess-react";

const react = sveltify({ button: "button" }, { createPortal: inject$$createPortal, ReactDOM: inject$$ReactDOM, renderToString: inject$$renderToString });
</script>

<react.button onClick={() => console.info("clicked")}>
  <slot />
</react.button>
"
`;

exports[`svelte-preprocess-react > should process {...rest} props 1`] = `
"<script lang="ts">import inject$$ReactDOM from "react-dom/client"; import { createPortal as inject$$createPortal} from "react-dom"; import { renderToString as inject$$renderToString } from "react-dom/server"; import { sveltify } from "svelte-preprocess-react";
  import type React from "react";

  const props: React.JSX.IntrinsicElements["div"] = {
    style: { backgroundColor: "#fcdef6" },
    onClick: () => console.info("clicked"),
  };
;const react = sveltify({ div: "div" }, { createPortal: inject$$createPortal, ReactDOM: inject$$ReactDOM, renderToString: inject$$renderToString });</script>

<react.div react$props={{ "aria-atomic": true, ...props, "aria-label": "after" }}>
  <span>Hi</span>
</react.div>
"
`;

exports[`svelte-preprocess-react > should process {:else} {:then} and {:catch} sections 1`] = `
"<script lang="ts">import inject$$ReactDOM from "react-dom/client"; import { createPortal as inject$$createPortal} from "react-dom"; import { renderToString as inject$$renderToString } from "react-dom/server"; import { sveltify } from "svelte-preprocess-react";
  import type React from "react";

  const number = 1;

  const Component: React.FC = () => null;
  const react = sveltify({ Component }, { createPortal: inject$$createPortal, ReactDOM: inject$$ReactDOM, renderToString: inject$$renderToString });
;</script>

<!-- eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -->
{#if number === 1}
  <react.Component />
  <!-- eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -->
{:else if number === 2}
  <react.Component />
{:else}
  <react.Component />
{/if}

{#each [] as _}
  <react.Component />
{:else}
  <react.Component />
{/each}

{#await Promise.resolve()}
  <react.Component />
{:then}
  <react.Component />
{:catch}
  <react.Component />
{/await}
"
`;

exports[`svelte-preprocess-react > should process on:event forwarding 1`] = `
"<script lang="ts">import inject$$ReactDOM from "react-dom/client"; import { createPortal as inject$$createPortal} from "react-dom"; import { renderToString as inject$$renderToString } from "react-dom/server"; import { sveltify } from "svelte-preprocess-react";
  import Clicker from "./Clicker";

  const react = sveltify({ Clicker }, { createPortal: inject$$createPortal, ReactDOM: inject$$ReactDOM, renderToString: inject$$renderToString });

  let { value = 0, onCount } = $props<{
    value: number;
    onCount: (count: number) => void;
  }>();
;</script>

<react.Clicker count={value} {onCount}></react.Clicker>
"
`;

exports[`svelte-preprocess-react > should support typescript when using preprocess 1`] = `
"<script lang="ts">
  export let title: string;
</script>

<h1>{title}</h1>
"
`;
